<?php

namespace {{ namespace }};

use App\Policies\Common\AuthorizablePolicy;
use Illuminate\Auth\Access\HandlesAuthorization;
use {{ namespacedModel }};
use {{ namespacedUserModel }};

class {{ class }} extends AuthorizablePolicy
{
    use HandlesAuthorization;

    public function __construct()
    {
        // TODO: モデルを指定
        // $this->model = Book::class;

        parent::__construct();
    }

    /**
     * Determine whether the user can view any models.
     *
     * @param  \{{ namespacedUserModel }}  $user
     * @return mixed
     */
    public function viewAny({{ user }} $user)
    {
        foreach ($this->model::permissionModels() as $model) {
            if ($user->hasAllOrPermissionTo(__FUNCTION__, $this->baseName($model))) {
                return true;
            }
        }
        return false;
    }

    /**
     * Determine whether the user can view the model.
     *
     * @param  \{{ namespacedUserModel }}  $user
     * @param  \{{ namespacedModel }}  ${{ modelVariable }}
     * @return mixed
     */
    public function view({{ user }} $user, {{ model }} ${{ modelVariable }})
    {
        foreach ($this->model::permissionModels() as $model) {
            if ($user->hasAllOrPermissionTo(__FUNCTION__, $this->baseName($model))) {
                return true;
            }
        }
        return false;
    }

    /**
     * Determine whether the user can create models.
     *
     * @param  \{{ namespacedUserModel }}  $user
     * @return mixed
     */
    public function create({{ user }} $user)
    {
        foreach ($this->model::permissionModels() as $model) {
            if ($user->hasAllOrPermissionTo(__FUNCTION__, $this->baseName($model))) {
                return true;
            }
        }
        return false;
    }

    /**
     * Determine whether the user can update the model.
     *
     * @param  \{{ namespacedUserModel }}  $user
     * @param  \{{ namespacedModel }}  ${{ modelVariable }}
     * @return mixed
     */
    public function update({{ user }} $user, {{ model }} ${{ modelVariable }})
    {
        foreach ($this->model::permissionModels() as $model) {
            if ($user->hasAllOrPermissionTo(__FUNCTION__, $this->baseName($model))) {
                return true;
            }
        }
        return false;
    }

    /**
     * Determine whether the user can delete the model.
     *
     * @param  \{{ namespacedUserModel }}  $user
     * @param  \{{ namespacedModel }}  ${{ modelVariable }}
     * @return mixed
     */
    public function delete({{ user }} $user, {{ model }} ${{ modelVariable }})
    {
        foreach ($this->model::permissionModels() as $model) {
            if ($user->hasAllOrPermissionTo(__FUNCTION__, $this->baseName($model))) {
                return true;
            }
        }
        return false;
    }

    /**
     * Determine whether the user can restore the model.
     *
     * @param  \{{ namespacedUserModel }}  $user
     * @param  \{{ namespacedModel }}  ${{ modelVariable }}
     * @return mixed
     */
    public function restore({{ user }} $user, {{ model }} ${{ modelVariable }})
    {
        foreach ($this->model::permissionModels() as $model) {
            if ($user->hasAllOrPermissionTo(__FUNCTION__, $this->baseName($model))) {
                return true;
            }
        }
        return false;
    }

    /**
     * Determine whether the user can permanently delete the model.
     *
     * @param  \{{ namespacedUserModel }}  $user
     * @param  \{{ namespacedModel }}  ${{ modelVariable }}
     * @return mixed
     */
    public function forceDelete({{ user }} $user, {{ model }} ${{ modelVariable }})
    {
        foreach ($this->model::permissionModels() as $model) {
            if ($user->hasAllOrPermissionTo(__FUNCTION__, $this->baseName($model))) {
                return true;
            }
        }
        return false;
    }
}
